params {
    max_memory = 160.GB
    max_cpus = 20
    max_time = 143.h
    lsf_account = "acc_apollo" // change it to your need
    lsf_sp = 1 //user priority 1-100
}

executor {
    $local {
        queueSize = 1 // to avoid too many local jobs starting simutaneously
    }

    $lsf {
        queueSize = 300
        submitRateLimit = '5 sec' //5 per second
        pollInterval = '1 min'
        queueStatInterval = '1 min'
        dumpInterval = '5 min'
        exitReadTimeout = '1 min'
        // Minerva is using per core memory request with rusage[mem=PER_CORE_MEM]
        // However Nextflow is using -M PER_CORE_MEM and rusage[mem=PER_JOB_MEM]
        // This imcompatibility leads to erroneous mem request that prevent jobs
        // from starting. Although the perJobMemLimit is set to 'true', the mem
        // specified in each task should be PER_CORE!
        perJobMemLimit = true
    }
}

process {
    executor = 'lsf'
    queue = 'premium'
    clusterOptions = {"-P ${params.lsf_account} -sp ${params.lsf_sp}"}
    // 140: TERM_RUNLIMIT
    // 130: TERM_MEMLIMIT
    errorStrategy = { task.exitStatus in [130, 140] ? 'retry' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'
}

def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
